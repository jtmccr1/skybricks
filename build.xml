<project name="skybricks" default="all" basedir=".">
    <description> Example of a substitution model dr for BEAST</description>
    <property file="beast_sdk.properties"/>
<!--    <property file="${user.home}/.ant-global.properties"/>-->
    <fail message="The beast.root property must be set. This is usually done by copying the beast_sdk.properties.in to beast_sdk.properties and modifying it to so that beast.root refers to the appropriate path.">
     <condition>
       <not>
         <isset property="beast.root"/>
       </not>
     </condition>
   </fail>


    <!-- set global properties for this build -->
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="lib" location="${beast.root}/build/dist"/>
    <property name="dist" location="dist"/>
    
    <!-- the following 2 properties will be changed for every dr that you write -->
      <!-- the dr-class is the class that implements dr.app.dr.Plugin -->
    <property name="dr-class" value="Skybricks"/>
      <!-- the dr-package is the package that contains your dr-class -->
    <property name="plugin-package" value="dr"/>
      <!-- dr-jar name should list the fully qualified name to your dr class -->
    <property name="plugin-jar" value="dr.Skybricks.jar"/>

    <property environment="env"/>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
    </target>

    <target name="all"
            depends="compile-all"
            description="Build all run-time stuff">
    </target>

    <target name="build"
            depends="compile-all"
            description="alias to compile-all">
    </target>

    <target name="compile-all"
            depends="compile-basic">
    </target>
    
    <target name="compile-basic"
            depends="init">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac source="1.8" srcdir="${src}" destdir="${build}"
               classpath="${lib}/beast.jar">
            <include name="${plugin-package}/**/*.java"/>
        </javac>
    </target>

    <target name="dist"
            depends="compile-all"
            description="create the dr jar and any other resources needed for the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>
        <!-- Put everything in ${build} into the treestat.jar file -->
        <jar jarfile="${dist}/${plugin-jar}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>
            <fileset dir="${build}">
                <include name="${plugin-package}/**/*.class"/>
            </fileset>
        </jar>
    </target>
    
    <target name="install"
            depends="dist" 
            description="Install the dr into BEAST's plugins directory">
        <mkdir dir="${beast.root}/plugins" />
        <copy file="${dist}/${plugin-jar}" todir="${beast.root}/plugins" />
    </target>

    <target name="uninstall"
            description="Remove the dr from BEAST's plugins directory">
        <delete file="${beast.root}/plugins/${plugin-jar}" verbose="true"/>
    </target>

    <target name="clean"
            description="Removes build products, but does not uninstall">
        <delete dir="${build}" verbose="true"/>
        <delete dir="${dist}" verbose="true"/>
    </target>

    <target name="test-install"
            depends="install"
            description="Runs integration tests of the dr">
        <mkdir dir="scratch" />
        <!-- run the example xml file -->
        <java jar="${lib}/beast.jar"
           fork="true"
           failonerror="false"
           resultproperty="example.exitcode"
           dir="scratch"
           >
         <sysproperty key="beast.plugins.dir" value="${beast.root}/plugins" />
            <arg value="-overwrite"/>
            <arg line="-seed 1597091028668"/>

         <arg value="${basedir}/example/example.xml"/>
         <classpath>
           <pathelement location="${lib}/beast.jar"/>
         </classpath>
       </java>
    <fail message="The example example/example.xml failed">
     <condition>
         <not> <equals arg1="${example.exitcode}" arg2="0"/></not>
     </condition>
   </fail>
    </target>
</project>
